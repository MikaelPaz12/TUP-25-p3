@page "/confirmar"
@inject CarritoService CarritoService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.SignalR.Client
@using cliente.Services

<div class="fondo-productos">
    <div class="container mt-4">
        <div class="titulos">
            <h2 class="fw-bold text-dark">Carrito de Compras</h2>
        </div>

        @if (carrito is null)
        {
            <p>Cargando carrito...</p>
        }
        else if (carrito.Items.Count == 0)
        {
            <p>El carrito esta vacio.</p>
        }
        else
        {
            <EditForm Model="datosCliente" OnValidSubmit="ConfirmarCompra">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label class="fw-bold text-white">Nombre:</label>
                    <InputText @bind-Value="datosCliente.Nombre" class="form-control"/>
                </div>
                <div>
                    <label class="fw-bold text-white">Apellido:</label>
                    <InputText @bind-Value="datosCliente.Apellido" class="form-control"/>
                </div>
                <div>
                    <label class="fw-bold text-white">Email:</label>
                    <InputText @bind-Value="datosCliente.Email" class="form-control"/>
                </div>
                <div class="fw-bold text-white">
                    <h5>Resumen de compra</h5>
                    <ul>
                        @foreach (var item in carrito.Items)
                        {
                            <li> @item.Producto.Nombre x @item.Cantidad - $ @((item.Cantidad * item.PrecioUnitario).ToString())</li>
                        }
                    </ul>
                    <b>Total: $ @carrito.Items.Sum(i => i.Cantidad * i.PrecioUnitario).ToString()</b>
                    <br />
                    <button class="btn btn-success" type="submit">Confirmar compra</button>
                </div>
            </EditForm>
        }
    </div>
</div>  
@code
{
    cliente.Services.Carrito? carrito;
    ClienteDto datosCliente = new();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        carrito = await CarritoService.GetCarritoAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5184/stockhub")
            .Build();

        hubConnection.On<int, int>("StockActualizado", (productoId, nuevoStock) =>
        {
            if (carrito is not null)
            {
                var item = carrito.Items.FirstOrDefault(i => i.ProductoId == productoId);
                if (item is not null)
                {
                    item.Producto.Stock = nuevoStock;
                    StateHasChanged();
                }
            }
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    async Task ConfirmarCompra()
    {
        await CarritoService.ConfirmarCompraAsync(datosCliente);
        NavigationManager.NavigateTo("/", true);
    }

    public class ClienteDto
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; } = "";

        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; } = "";

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "El email debe ser v√°lido y contener un @")]
        public string Email { get; set; } = "";
    }
}
