@page "/carrito"
@using cliente.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject CarritoService CarritoService
@inject NavigationManager NavigationManager

<div class="fondo-productos">
    <div class="container mt-4">
        <div class="titulos">
            <h2 class="fw-bold text-dark">Carrito de Compras</h2>
        </div>

        @if (carrito is null)
        {
            <p class="fw-bold text-white">Cargando carrito...</p>
        }
        else if (carrito.Items.Count == 0)
        {
            <p class="fw-bold text-white">El carrito esta vacio.</p>
            <div class="">
                <button class="btn btn-primary" @onclick="VolverAlCatalogo">Seguir comprando</button>
            </div>
            <a class="btn btn-secondary" href="/">Volver al catalogo</a>
        }
        else
        {
            <table class="table table-striped align-middle">
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Precio Unitario</th>
                        <th>Cantidad</th>
                        <th>Importe</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in carrito.Items)
                    {
                        <tr>
                            <td>
                                <img src="@item.Producto.ImagenUrl" alt="@item.Producto.Nombre" style="height:40px;width:40px;object-fit:cover;margin-right:8px;" />
                                @item.Producto.Nombre
                            </td>
                            <td>$ @item.PrecioUnitario.ToString()</td>
                            <td>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => CambiarCantidad(item.ProductoId, item.Cantidad - 1)" disabled="@(item.Cantidad == 1)">-</button>
                                <span class="mx-2">@item.Cantidad</span>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => CambiarCantidad(item.ProductoId, item.Cantidad + 1)" disabled="@(item.Cantidad >= item.Producto.StockTotal)">+</button>
                            </td>
                            <td>$ @((item.Cantidad * item.PrecioUnitario).ToString())</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="() => QuitarProducto(item.ProductoId)">Quitar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="fw-bold text-white">
                <b>Total: </b> $ @carrito.Items.Sum(i => i.Cantidad * i.PrecioUnitario).ToString()
            </div>
            <div class="mb-3">
                <button class="btn btn-agregar me-2" @onclick="VaciarCarrito">Vaciar carrito</button>
                <button class="btn btn-primary me-2" @onclick="VolverAlCatalogo">Seguir comprando</button>
                <button class="btn btn-success me-2" @onclick='() => NavigationManager.NavigateTo("/confirmar")'>Confirmar compra</button>
                
            </div>
        }
    </div>
</div>

@code
{
    cliente.Services.Carrito? carrito;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        carrito = await CarritoService.GetCarritoAsync();
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5184/stockhub")
            .Build();

        hubConnection.On<int, int>("StockActualizado", (productoId, nuevoStock) =>
        {
            if (carrito is not null)
            {
                var item = carrito.Items.FirstOrDefault(i => i.ProductoId == productoId);
                if (item is not null)
                {
                    item.Producto.Stock = nuevoStock;
                    StateHasChanged();
                }
            }
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    

    async Task CambiarCantidad(int productoId, int nuevaCantidad)
    {
        if (nuevaCantidad < 1) return;
        await CarritoService.AgregarProductoAsync(productoId, nuevaCantidad);
        carrito = await CarritoService.GetCarritoAsync();
        StateHasChanged();
    }

    async Task QuitarProducto(int productoId)
    {
        await CarritoService.QuitarProductoAsync(productoId);
        carrito = await CarritoService.GetCarritoAsync();
        StateHasChanged();
    }

    async Task VaciarCarrito()
    {
        await CarritoService.VaciarCarritoAsync();
        carrito = await CarritoService.GetCarritoAsync();
        StateHasChanged();
    }
    void VolverAlCatalogo()
    {
        NavigationManager.NavigateTo("/");
    }
}