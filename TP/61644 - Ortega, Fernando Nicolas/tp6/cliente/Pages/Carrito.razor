@page "/carrito"
@inject cliente.Services.CarritoService CarritoService
@inject cliente.Services.ApiService ApiService
@inject NavigationManager Navigation
@using cliente.Services

<div class="fondo">
    <div class="container mt-4"> 
        <PageTitle>Carrito</PageTitle>

        <div class="container">
            <h2 class="mb-4 text-center text-white">Carrito de compras</h2>

            @if (CarritoService.Articulos.Count == 0)
            {
                <div class="alert alert-info">El carrito está vacío.</div>
                <a href="/" class="btn btn-primary">Volver al catálogo</a>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Imagen</th>
                            <th>Producto</th>
                            <th>Precio unitario</th>
                            <th>Cantidad</th>
                            <th>Importe</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var articulo in CarritoService.Articulos)
                        {
                            <tr>
                                <td><img src="@articulo.ImagenUrl" alt="@articulo.Nombre" width="60" /></td>
                                <td>@articulo.Nombre</td>
                                <td>$@articulo.PrecioUnitario</td>
                                <td>
                                    <button class="btn btn-sm btn-secondary"
                                            @onclick="async () => await CambiarCantidad(articulo, articulo.Cantidad - 1)"
                                            disabled="@(articulo.Cantidad <= 1)">-</button>
                                    <span class="mx-2">@articulo.Cantidad</span>
                                    <button class="btn btn-sm btn-secondary"
                                            @onclick="async () => await CambiarCantidad(articulo, articulo.Cantidad + 1)"
                                            disabled="@(GetStockDisponible(articulo.ProductoId) == 0)">
                                        +
                                    </button>
                                </td>
                                <td>$@(articulo.Cantidad * articulo.PrecioUnitario)</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @onclick="async () => await Quitar(articulo.ProductoId)">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="mb-3 text-white">
                    <strong>Total: $@CarritoService.TotalImporte()</strong>
                </div>
                <button class="btn btn-warning me-2" @onclick="Vaciar">Vaciar carrito</button>
                <button class="btn btn-success" @onclick="ConfirmarCompra">Confirmar compra</button>
            }

            @if (!string.IsNullOrEmpty(CarritoService.Mensaje))
            {
                <div class="alert alert-warning">@CarritoService.Mensaje</div>
            }
        </div>
    </div>
</div>
@implements IDisposable
@code {
    private List<Producto> productos = new();

    protected override async Task OnInitializedAsync()
    {
        CarritoService.OnChange += ActualizarProductos;
        await CargarProductos();
    }

    private async void ActualizarProductos()
    {
        await CargarProductos();
        StateHasChanged();
    }

    private async Task CargarProductos()
    {
        productos = await ApiService.ObtenerProductosAsync();
    }

    private int GetStockDisponible(int productoId)
    {
        var producto = productos.FirstOrDefault(p => p.Id == productoId);
        return producto?.Stock ?? 0;
    }

    private async Task CambiarCantidad(ArticuloCarrito articulo, int nuevaCantidad)
    {
        if (nuevaCantidad < 1) return;
        if (GetStockDisponible(articulo.ProductoId) == 0 && nuevaCantidad > articulo.Cantidad) return;

        await CarritoService.CambiarCantidadAsync(articulo.ProductoId, nuevaCantidad);
    }

    private async Task Quitar(int productoId)
    {
        await CarritoService.QuitarAsync(productoId);
    }

    private async Task Vaciar()
    {
        await CarritoService.VaciarAsync();
        StateHasChanged();
    }

    private void ConfirmarCompra()
    {
        Navigation.NavigateTo("/confirmacion");
    }

    public void Dispose()
    {
        CarritoService.OnChange -= ActualizarProductos;
    }

    private void VolverAlCatalogo()
    {
        Navigation.NavigateTo("/");
    }
}