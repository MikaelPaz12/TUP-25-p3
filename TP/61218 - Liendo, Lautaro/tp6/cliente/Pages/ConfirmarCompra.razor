@page "/confirmar-compra/{IdCarrito}"

@using cliente.DTOs
@using cliente.Models

@inject ApiService ApiService
@inject NavigationManager NavManager

<div class="max-w-xl mx-auto mt-12 p-6 bg-white rounded-lg shadow-lg">

    <h3 class="text-3xl font-bold mb-6 text-center text-gray-800">Confirmar Compra</h3>

    @if (cargando)
    {
        <p class="text-center text-gray-600">Cargando carrito...</p>
    }
    else if (carrito == null || carrito.Count == 0)
    {
        <p class="text-center text-red-600 mb-4 font-semibold">El carrito está vacío.</p>
        <div class="text-center">

            <button @onclick="VolverAlCatalogo"

                    class="px-5 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
                Volver al catálogo
            </button>
        </div>
    }
    else
    {
        <div class="mb-6">
            <p class="text-lg font-semibold">Total ítems: <span class="text-blue-700">@TotalItems</span></p>
            <p class="text-lg font-semibold">Importe total: <span class="text-green-600">$@TotalImporte.ToString("F2")</span></p>
        </div>

        <EditForm Model="datosCliente" OnValidSubmit="ProcesarCompra" class="space-y-4">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600" />

            <div>
                <label class="block font-medium mb-1">Nombre:</label>

                <InputText @bind-Value="datosCliente.NombreSolicitante"

                           class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400" />
                <ValidationMessage For="@(() => datosCliente.NombreSolicitante)" class="text-red-600 text-sm" />
            </div>

            <div>
                <label class="block font-medium mb-1">Apellido:</label>

                <InputText @bind-Value="datosCliente.ApellidoSolicitante"

                           class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400" />
                <ValidationMessage For="@(() => datosCliente.ApellidoSolicitante)" class="text-red-600 text-sm" />
            </div>

            <div>
                <label class="block font-medium mb-1">Email:</label>
                <InputText @bind-Value="datosCliente.CorreoElectronicoContacto" type="email"
                           class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400" />
                <ValidationMessage For="@(() => datosCliente.CorreoElectronicoContacto)" class="text-red-600 text-sm" />
            </div>

            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <p class="text-red-700 font-semibold text-center mt-2">@mensajeError</p>
            }

            <div class="flex justify-between mt-6">

                <button type="submit"

                        class="bg-green-600 hover:bg-green-700 text-white font-semibold px-6 py-3 rounded-md shadow-md transition">
                    Confirmar compra
                </button>


                <button type="button" @onclick="VaciarCarrito"

                        class="bg-red-600 hover:bg-red-700 text-white font-semibold px-6 py-3 rounded-md shadow-md transition">
                    Vaciar carrito
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public string IdCarrito { get; set; }

    bool cargando = true;
    List<DetalleCarritoMemoria> carrito;
    string mensajeError;

    DatosClienteDTO datosCliente = new DatosClienteDTO();

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();
    }

    async Task CargarCarrito()
    {
        try
        {

            carrito = await ApiService.GetCarritoItemsAsync(IdCarrito) ?? new List<DetalleCarritoMemoria>();

        }
        catch
        {
            carrito = new List<DetalleCarritoMemoria>();
        }
        cargando = false;
        StateHasChanged();
    }

    int TotalItems => carrito?.Sum(i => i.Unidades) ?? 0;
    double TotalImporte => carrito?.Sum(i => i.Unidades * i.ValorPorUnidad) ?? 0;

    async Task ProcesarCompra()
    {
        mensajeError = null;


        var exito = await ApiService.ConfirmCompraAsync(IdCarrito, datosCliente);
        if (exito)
        {
            NavManager.NavigateTo("/compra-confirmada");
        }
        else
        {
            mensajeError = "No se pudo confirmar la compra. Verificá los datos e intentá nuevamente.";

        }
    }

    async Task VaciarCarrito()
    {

        await ApiService.ClearCarritoAsync(IdCarrito);

        carrito.Clear();
        NavManager.NavigateTo("/");
    }

    void VolverAlCatalogo()
    {
        NavManager.NavigateTo("/");
    }
}
