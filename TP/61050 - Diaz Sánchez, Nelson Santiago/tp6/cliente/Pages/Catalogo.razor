@page "/"
@page "/catalogo"

@inject cliente.Services.ApiService ApiService
@inject cliente.Services.CarritoService CarritoService
@using cliente.Models
<div class="d-flex flex-column min-vh-100 w-100 bg-dark">
<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
  <div class="container-fluid">
    <a class="navbar-brand" href="/">üõçÔ∏è MiTienda</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
      aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link" href="/catalogo">Cat√°logo</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/carrito">Carrito</a>
        </li>
      </ul>
       </div>
        </div>
</nav>
<div class="container-fluid flex-grow-1 w-100 mt-5 bg-dark text-white p-4 rounded">
    <h1 class="mb-0 text-center text-info fw-bold">Cat√°logo de Productos</h1>

    @if (mostrarMensaje)
    {
        <div class="alert alert-success alert-dismissible fade show bg-success text-white border-0" role="alert">
            @mensaje
            <button type="button" class="btn-close btn-close-white" @onclick="() => mostrarMensaje = false" aria-label="Close"></button>
        </div>
    }

    <div class="text-end mb-4">
        <a href="/carrito" class="btn btn-outline-light position-relative">
            üõí Ver carrito
            @if (CarritoService.CantidadTotal > 0)
            {
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @CarritoService.CantidadTotal
                </span>
            }
        </a>
    </div>

    @if (productos == null)
    {
        <div class="text-center">
            <div class="spinner-border text-light" role="status">
                <span class="visually-hidden">Cargando productos...</span>
            </div>
        </div>
    }
    else if (productos.Count == 0)
    {
        <p class="text-warning text-center">No se encontraron productos.</p>
    }
    else
    {
   <div class="d-flex justify-content-center mb-4">
    <input type="text" class="form-control bg-secondary text-white border-0 w-75" placeholder="üîç Buscar producto..." @bind="terminoBusqueda" />
</div>

<div class="d-flex flex-wrap justify-content-center gap-4 min-vh-50 mb-5">
    @foreach (var producto in productosFiltrados)
    {
        <div class="card bg-secondary text-white shadow-sm" style="width: 18rem;">
            <img src="@producto.Imagen" class="card-img-top" style="height: 200px; object-fit: cover;" />
            <div class="card-body d-flex flex-column">
                <h5 class="card-title">@producto.Nombre</h5>
                <p class="card-text text-light">@producto.Descripcion</p>
                <p><strong>Precio:</strong> $@producto.Precio</p>
                <p><strong>Stock:</strong> @producto.Cantidad</p>
                <button class="btn btn-outline-light mt-auto"
        @onclick="() => AgregarAlCarrito(producto.Id)"
        disabled="@(producto.Cantidad == 0)">
    ‚ûï Agregar al carrito
</button>
            </div>
        </div>
    }
</div>


    }
</div>
</div>
@code {
    private string terminoBusqueda = "";

    private IEnumerable<Producto> productosFiltrados => productos
        ?.Where(p => string.IsNullOrWhiteSpace(terminoBusqueda) || p.Nombre.Contains(terminoBusqueda, StringComparison.OrdinalIgnoreCase))
        ?? Enumerable.Empty<Producto>();
    private List<Producto> productos;

    private string mensaje = "";
    private bool mostrarMensaje = false;

    protected override async Task OnInitializedAsync()
    {
    if (CarritoService.ProductosConStock.Count == 0)
    {
        productos = await ApiService.ObtenerProductosAsync();
        CarritoService.ProductosConStock = productos;
    }
    else
    {
        productos = CarritoService.ProductosConStock;
    }

    CarritoService.OnChange += StateHasChanged;
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        var producto = productos.FirstOrDefault(p => p.Id == productoId);
        if (producto != null)
        {
            producto.Cantidad--;
            CarritoService.AgregarProducto(producto);
            mensaje = $"‚úÖ {producto.Nombre} fue agregado al carrito.";
            mostrarMensaje = true;

            await Task.Delay(3000);
            mostrarMensaje = false;
        }
    }
}
