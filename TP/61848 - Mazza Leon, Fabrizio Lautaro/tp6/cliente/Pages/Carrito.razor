@page "/carrito"
@using cliente.Models
@using cliente.Services
@inject CarritoService CarritoService
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject StockLocalService StockLocalService

<PageTitle>Carrito de compras</PageTitle>

<div class="container">
    <h1>Carrito de Compras</h1>

    @if (CarritoService.Items.Count == 0)
    {
        <p>No hay productos en el carrito.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in CarritoService.Items)
                {
                    var productoCatalogo = productosCatalogo?.FirstOrDefault(p => p.Id == item.Producto.Id);
                    int maxCantidad = (productoCatalogo != null ? productoCatalogo.Stock : 0) + item.Cantidad;
                    <tr>
                        <td>
                            <img src="@item.Producto.ImagenUrl" alt="@item.Producto.Nombre" style="width:120px;height:120px;object-fit:cover;border-radius:8px;" />
                        </td>
                        <td>@item.Producto.Nombre</td>
                        <td>$@item.Producto.Precio</td>
                        <td>
                            <div class="input-group" style="width: 120px;">
                                <button class="btn btn-outline-secondary" @onclick="() => CambiarCantidad(item.Producto.Id, item.Cantidad - 1)" disabled="@(item.Cantidad <= 0)">-</button>
                                <span class="form-control text-center" style="padding: 0.375rem 0;">@item.Cantidad</span>
                                <button class="btn btn-outline-secondary" @onclick="() => CambiarCantidad(item.Producto.Id, item.Cantidad + 1)" disabled="@(item.Cantidad >= maxCantidad)">+</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <p><strong>Total:</strong> $@CarritoService.CalcularTotal()</p>

        <button class="btn btn-danger" @onclick="VaciarCarrito">Vaciar carrito</button>

        <h3 class="mt-4">Confirmar compra</h3>

        <EditForm Model="formulario" OnValidSubmit="ConfirmarCompra">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>Nombre:</label>
                <InputText class="form-control" @bind-Value="formulario.Nombre" />
            </div>
            <div class="mb-3">
                <label>Apellido:</label>
                <InputText class="form-control" @bind-Value="formulario.Apellido" />
            </div>
            <div class="mb-3">
                <label>Email:</label>
                <InputText class="form-control" @bind-Value="formulario.Email" />
            </div>

            <button type="submit" class="btn btn-success">Confirmar compra</button>
        </EditForm>
    }
</div>

@if (mostrarModal)
{
    <div style="position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.5);z-index:1050;display:flex;align-items:center;justify-content:center;">
        <div style="background:white;border-radius:18px;box-shadow:0 8px 32px rgba(0,0,0,0.25);padding:2.5rem 2rem;max-width:90vw;width:350px;text-align:center;position:relative;">
            <div style="font-size:3rem;color:#28a745;margin-bottom:0.5rem;">
                <svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' fill='currentColor' viewBox='0 0 16 16'>
                    <path d='M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM7 11.414l5.207-5.207-1.414-1.414L7 8.586 5.207 6.793 3.793 8.207 7 11.414z'/>
                </svg>
            </div>
            <h3 class="modal-title mb-2" style="font-weight:700;">¡Compra realizada con éxito!</h3>
            <button class="btn btn-success w-100" style="border-radius:8px;font-weight:500;font-size:1.1rem;" @onclick="VolverAlCatalogo">Volver al catálogo</button>
        </div>
    </div>
}

@code {
    private List<Producto> productosCatalogo;
    private bool mostrarModal = false;
    async void CambiarCantidad(int productoId, int nuevaCantidad)
    {
        if (productosCatalogo == null)
            productosCatalogo = await StockLocalService.LeerStockAsync();
        CarritoService.CambiarCantidad(productoId, nuevaCantidad, productosCatalogo);
        await StockLocalService.GuardarStockAsync(productosCatalogo);
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        productosCatalogo = await StockLocalService.LeerStockAsync();
        await base.OnInitializedAsync();
    }
    private CompraFormulario formulario = new();
    public async void VaciarCarrito()
    {
        await StockLocalService.RestaurarStockInicialAsync();
        CarritoService.Vaciar();
        Navigation.NavigateTo("/", true);
    }
    public async Task ConfirmarCompra()
    {
        formulario.CarritoId = CarritoService.CarritoId;
        var exito = await ApiService.ConfirmarCompraAsync(CarritoService.Items, formulario);
        if (exito)
        {
            mostrarModal = true;
            CarritoService.Vaciar();
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al confirmar la compra.");
        }
    }
    private void VolverAlCatalogo()
    {
        mostrarModal = false;
        Navigation.NavigateTo("/");
    }
}