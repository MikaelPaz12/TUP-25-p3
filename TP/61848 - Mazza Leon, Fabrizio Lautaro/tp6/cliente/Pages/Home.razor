@page "/"
@using cliente.Models
@using cliente.Services
@inject NavigationManager Navigation
@inject ApiService ApiService
@inject CarritoService CarritoService
@inject StockLocalService StockLocalService

<PageTitle>TiendaOnline</PageTitle>

<div class="container">
    <h1 class="text-center">Catálogo de productos</h1>

    <div class="buscador-productos">
        <input class="form-control buscador-input"
               placeholder="Buscar productos..."
               @bind="busqueda"
               @bind:event="oninput" />
    </div>

    @if (productos == null)
    {
        <p>Cargando productos...</p>
    }
    else if (productos.Count == 0)
    {
        <p>No hay productos disponibles.</p>
    }
    else
    {
        <div class="row">
            @foreach (var producto in Filtrados)
            {
                <div class="custom-col-5 d-flex">
                    <div class="card h-100 w-100">
                        <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@producto.Nombre</h5>
                            <p class="card-text">@producto.Descripcion</p>
                            <p><strong>Stock:</strong> @producto.Stock</p>
                            <p><strong>Precio:</strong> $@producto.Precio</p>
                            <button class="btn btn-primary w-100" disabled="@(producto.Stock == 0)" @onclick="async () => await AgregarAlCarrito(producto)">
                                Agregar al carrito
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Producto> productos;
    private string busqueda = "";

    private IEnumerable<Producto> Filtrados =>
        string.IsNullOrWhiteSpace(busqueda)
            ? productos?.Where(p => p.Stock > 0) ?? Enumerable.Empty<Producto>()
            : productos?.Where(p => p.Stock > 0 && p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase)) ?? Enumerable.Empty<Producto>();

    protected override async Task OnInitializedAsync()
    {
        productos = await StockLocalService.LeerStockAsync();
        if (productos == null)
        {
            productos = await ApiService.ObtenerProductosAsync();
            await StockLocalService.GuardarStockAsync(productos);
            await StockLocalService.GuardarStockInicialAsync(productos);
        }
        else
        {
            var stockInicial = await StockLocalService.LeerStockInicialAsync();
            if (stockInicial == null)
            {
                await StockLocalService.GuardarStockInicialAsync(productos);
            }
        }
        await CarritoService.InicializarCarritoAsync(ApiService);
    }
    
    async Task AgregarAlCarrito(Producto producto)
    { 
        if (producto.Stock > 0)
        {
            CarritoService.AgregarProducto(producto);
            producto.Stock -= 1;
            await StockLocalService.GuardarStockAsync(productos);
        }
        StateHasChanged();
        Navigation.NavigateTo("/carrito");
    }
}